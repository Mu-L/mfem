#!/usr/bin/env perl

# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at the
# Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights reserved.
# See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.

my $branch_max_commits = 200;
my $commit_max_files_changed = 50;
my $max_blob_kb = 200;
my $max_commit_kb = 400;
my $max_branch_kb = 1000;

my $status = 0; # Return code

# Get SHA hash of all commits in this branch
my @commits = split /\n/, `git log --pretty=format:%H master..HEAD`;

# Check if total number of commits in this branch exceeds the maximum allowable
my $ncommits = scalar @commits;
if ($ncommits > $branch_max_commits) {
  printf STDERR
    "\033[31mNumber of commits in this branch (%d) exceeds maximum allowable (%d).\033[0m\n",
    $ncommits, $branch_max_commits;
  $status = 1;
}

# Print SHA in blue
sub print_sha {
  printf STDERR "\033[34m    ^---> SHA: %s\033[0m\n", $_[0];
}

# Loop over each commit in this branch, and check for large diffs
my $total_size = 0;
foreach my $sha (@commits) {
  my @blobs = `git diff-tree -r -M -C --no-commit-id $sha`;
  my $nfiles_changed = scalar @blobs;
  if ($nfiles_changed > $commit_max_files_changed) {
    printf STDERR
      "\033[31mNumber of files changed in one commit (%d) exceeds maximum allowable (%d).\033[0m\n",
      $nfiles_changed, $commit_max_files_changed;
    print_sha($sha);
    $status = 1;
  }
  # Accumulate size of each commit in bytes
  my $commit_size = 0;
  foreach my $blob (@blobs) {
    my @blob_split = (split /\s/, $blob);
    my $src = @blob_split[2];
    my $dst = @blob_split[3];
    my $mode = @blob_split[4];
    my $fname = @blob_split[5];

    my $blob_size = 0;
    if ($mode eq "A") { $blob_size += int(`git cat-file -s $dst`); }
    elsif ($mode =~ m/C\d*/) { $blob_size += int(`git cat-file -s $dst`); }
    elsif ($mode eq "D") { }
    elsif ($mode =~ m/M\d*/) { $blob_size += int(`git diff -U0 --binary $src $dst | gzip -c | wc -c`); }
    elsif ($mode =~ m/R\d*/) { }
    elsif ($mode eq "T") { }
    elsif ($mode eq "U") { }
    else { die "Unknown git status letter." }
    if ($blob_size > $max_blob_kb*1024) {
      $status = 1;
      printf STDERR "\033[31mLarge change of size %d KB in file %s.\033[0m\n", ($blob_size/1024), $fname;
      print_sha($sha);
    }
    $commit_size += $blob_size;
  }
  if ($commit_size > $max_commit_kb*1024) {
    $status = 1;
    printf STDERR "\033[31mLarge commit of size %d KB.\033[0m\n", $commit_size/1024;
    print_sha($sha);
  }
  $total_size += $commit_size;
}

if ($total_size > $max_branch_kb*1024) {
  printf STDERR "\033[31mLarge total branch size: %d KB.\033[0m\n", $total_size/1024;
  $status = 1;
}

if ($status) {
  open(my $f, '>', "$0.msg");
  print $f <<EOF

The failure of this script indicate that large files or a large number of files
have been added or committed in the current branch history.

This could be OK in certain cases, but it could also be a sign that large files
have accidentally been committed.

To address this error, examine the listed files and commits to make sure all
large changes were intentional. If there is a wrong commit that has to be
deleted, please either:

1) Recreate the branch without that commit.
2) Indicate that the branch should be squash-merged

or contact a member of the MFEM team for help or if you have questions.

EOF
}

exit $status;
