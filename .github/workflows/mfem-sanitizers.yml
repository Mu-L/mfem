# Copyright (c) 2010-2025, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

name: "Sanitizers"

permissions:
  actions: write

on:
  push:
    branches: ["master", "next"]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

env:
  # AddressSanitizer (https://clang.llvm.org/docs/AddressSanitizer.html)
  ASAN_OPTIONS: "detect_leaks=1,
                 strict_init_order=1,
                 strict_string_checks=1,
                 check_initialization_order=1,
                 detect_stack_use_after_return=1"
  # UndefinedBehaviorSanitizer (https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)
  UBSAN_OPTIONS: "halt_on_error=1, print_stacktrace=1"
  # MemorySanitizer (https://clang.llvm.org/docs/MemorySanitizer.html)
  MSAN_OPTIONS: "poison_in_dtor=1"
  # LLVM libcxx (https://github.com/llvm/llvm-project/releases?page=2)
  LLVM_VER: 19.1.7
  HYPRE_VER: 2.19.0  # 2.33.0
  METIS_VER: 4.0.3

jobs:
  Sanitizers:
    # Ubuntu 24.04 (https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md)
    runs-on: ubuntu-latest
    strategy:
      # Avoid canceling all in-progress and queued jobs in the matrix if any one fails
      fail-fast: true  # false
      matrix:
        sanitizer: [AddressSanitizer, UndefinedBehaviorSanitizer, MemorySanitizer]
        mpi: [seq, par]
        exclude:
          # Avoid running MemorySanitizer with MPI
          - sanitizer: MemorySanitizer
            mpi: par
        include:
          # AddressSanitizer
          - sanitizer: AddressSanitizer
            cxxflags: "-fsanitize=address -fno-omit-frame-pointer
                       -fsanitize-address-use-after-scope"
            ldflags: "-fsanitize=address"
            llvm_sanitizer: "Address"
          # UndefinedBehaviorSanitizer
          - sanitizer: UndefinedBehaviorSanitizer
            cxxflags: "-fsanitize=undefined -fno-omit-frame-pointer"
            ldflags: "-fsanitize=undefined"
            llvm_sanitizer: "Undefined"
          # MemorySanitizer
          - sanitizer: MemorySanitizer
            cxxflags: "-fsanitize=memory -fno-omit-frame-pointer
                       -fsanitize-memory-track-origins -fsanitize-memory-use-after-dtor"
            ldflags: "-fsanitize=memory"
            llvm_sanitizer: "MemoryWithOrigins"

    name: "${{matrix.sanitizer}}-${{matrix.mpi}}"

    steps:
      ### GITHUB_ENV
      - name: GITHUB_ENV Setup (Compilers)
        run: |
          echo "CC=cc" >> $GITHUB_ENV
          echo "CXX=c++" >> $GITHUB_ENV
          echo "MPICXX=c++" >> $GITHUB_ENV

      - name: GITHUB_ENV Setup (Directories)
        run: |
          echo "ASAN_DIR=${GITHUB_WORKSPACE}/asan" >> $GITHUB_ENV
          echo "LLVM_DIR=${GITHUB_WORKSPACE}/llvm" >> $GITHUB_ENV

      - name: GITHUB_ENV Setup (LLVM, HYPRE, METIS)
        run: |
          echo "LLVM_INC=${LLVM_DIR}/include/c++/v1" >> $GITHUB_ENV
          echo "LLVM_LIB=${LLVM_DIR}/lib" >> $GITHUB_ENV
          echo "HYPRE_TGZ=v${{env.HYPRE_VER}}.tar.gz" >> $GITHUB_ENV
          echo "HYPRE_DIR=hypre-${{env.HYPRE_VER}}" >> $GITHUB_ENV
          echo "METIS_TGZ=metis-${{env.METIS_VER}}.tar.gz" >> $GITHUB_ENV
          echo "METIS_DIR=metis-${{env.METIS_VER}}" >> $GITHUB_ENV

      - name: GITHUB_ENV Echo (LLVM, HYPRE, METIS)
        run: |
          echo "[LLVM_DIR] ${{env.LLVM_DIR}}"
          echo "[LLVM_INC] ${{env.LLVM_INC}}"
          echo "[LLVM_LIB] ${{env.LLVM_LIB}}"
          echo "[HYPRE_TGZ] ${{env.HYPRE_TGZ}}"
          echo "[HYPRE_DIR] ${{env.HYPRE_DIR}}"
          echo "[METIS_TGZ] ${{env.METIS_TGZ}}"
          echo "[METIS_DIR] ${{env.METIS_DIR}}"

      ### Clang
      - name: Clang Local
        run: |
          echo "\x1b[33mls -la /usr/local\x1b[m"
          ls -la /usr/local
          echo "ls -la /usr/local/bin"
          ls -la /usr/local/bin
          echo "which clang++"
          which clang++

      - name: Clang Setup
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: GITHUB_ENV Echo (Compilers)
        run: |
          echo "[CC] ${{env.CC}} -v"
          ${{env.CC}} -v
          echo "[CXX] ${{env.CXX}} -v"
          ${{env.CXX}} -v

      ### MPI
      # export OMPI_MCA_rmaps_base_oversubscribe=1
      # export PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe
      - name: MPI Setup
        if: matrix.mpi == 'par'
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev
          echo "PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe" >> $GITHUB_ENV

      - name: MPI Showme
        if: matrix.mpi == 'par'
        run: |
          echo "MPI_INC=$(mpicxx --showme:compile)" >> $GITHUB_ENV
          echo "MPI_LIB=$(mpicxx --showme:link)" >> $GITHUB_ENV
          echo "[MPI_INC] ${{env.MPI_INC}}"
          echo "[MPI_LIB] ${{env.MPI_LIB}}"
          echo "> mpicxx --version"
          mpicxx --version
          echo "> mpicxx --showme:compile"
          mpicxx --showme:compile
          echo "> mpicxx --showme:link"
          mpicxx --showme:link
          echo "> mpicxx --showme:command"
          mpicxx --showme:command
          echo "> mpicxx --showme:incdirs"
          mpicxx --showme:incdirs
          echo "> mpicxx --showme:libdirs"
          mpicxx --showme:libdirs
          echo "> mpicxx --showme:libs"
          mpicxx --showme:libs
          echo "> mpicxx --showme:version"
          mpicxx --showme:version

      ### LSAN_OPTIONS & ASan suppression file
      - name: ASAN Setup
        run: |
          mkdir -p ${{env.ASAN_DIR}}
          echo LSAN_OPTIONS="suppressions=${{env.ASAN_DIR}}/asan.supp" >> $GITHUB_ENV
          cat << EOF > ${{env.ASAN_DIR}}/asan.supp
          leak:ompi_mpi_finalize
          leak:ompi_mpi_init
          leak:PMPI_Init
          leak:libevent_core-2.1.so
          leak:strdup
          EOF

      ### LLVM libcxx (https://github.com/llvm/llvm-project/tree/main/libcxx)
      - name: LLVM Cache
        if: matrix.sanitizer != 'AddressSanitizer'
        id: llvm-cache
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.llvm_sanitizer}}

      - name: LLVM Clone
        if: matrix.sanitizer != 'AddressSanitizer' && steps.llvm-cache.outputs.cache-hit != 'true'
        run: >
          git clone --filter=blob:none --depth=1
          --branch llvmorg-${{env.LLVM_VER}}
          --no-checkout https://github.com/llvm/llvm-project.git llvm-project

      - name: LLVM Checkout
        if: matrix.sanitizer != 'AddressSanitizer' && steps.llvm-cache.outputs.cache-hit != 'true'
        working-directory: llvm-project
        run: |
          git sparse-checkout set --cone
          git checkout llvmorg-${{env.LLVM_VER}}
          git sparse-checkout set cmake llvm/cmake runtimes libcxx libcxxabi

      - name: LLVM Mkdir
        if: matrix.sanitizer != 'AddressSanitizer' && steps.llvm-cache.outputs.cache-hit != 'true'
        run: mkdir ${{env.LLVM_DIR}}

      - name: LLVM Configure
        if: matrix.sanitizer != 'AddressSanitizer' && steps.llvm-cache.outputs.cache-hit != 'true'
        working-directory: ${{env.LLVM_DIR}}
        run: >
          VERBOSE=1
          cmake -GNinja ../llvm-project/runtimes/
          -DCMAKE_C_COMPILER=${{env.CC}}
          -DCMAKE_CXX_COMPILER=${{env.CXX}}
          -DCMAKE_BUILD_TYPE=RelWithDebInfo
          -DCMAKE_INSTALL_PREFIX=/usr
          -DLLVM_USE_SANITIZER=${{matrix.llvm_sanitizer}}
          -DLLVM_BUILD_32_BITS=OFF
          -DLIBCXXABI_USE_LLVM_UNWINDER=OFF
          -DLLVM_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_BENCHMARKS=OFF
          -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi'

      - name: LLVM CMake
        if: matrix.sanitizer != 'AddressSanitizer' && steps.llvm-cache.outputs.cache-hit != 'true'
        working-directory: ${{env.LLVM_DIR}}
        run: cmake --build . -- cxx cxxabi

      - name: Setup LLVM GITHUB_ENV
        if: matrix.sanitizer != 'AddressSanitizer'
        run: |
          echo "LLVM_CXXFLAGS=-stdlib=libc++ -I${{env.LLVM_INC}} -Isystem${{env.LLVM_INC}}" >> $GITHUB_ENV
          echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV

      - name: Echo LLVM GITHUB_ENV
        if: matrix.sanitizer != 'AddressSanitizer'
        run: |
          echo "[LLVM_CXXFLAGS] ${{env.LLVM_CXXFLAGS}}"
          echo "[LLVM_LDFLAGS] ${{env.LLVM_LDFLAGS}}"

      ### HYPRE
      - name: HYPRE Cache
        id: hypre-cache
        if: matrix.mpi == 'par'
        uses: actions/cache@v4
        with:
          path: ${{env.HYPRE_DIR}}
          key: Linux-${{env.HYPRE_DIR}}-v2.5

      - name: HYPRE Build
        if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-hypre@v2.5
        with:
          archive: ${{env.HYPRE_TGZ}}
          dir: ${{env.HYPRE_DIR}}
          target: int32
          precision: fp64
          build-system: make

      ### METIS
      - name: METIS Cache
        id: metis-cache
        if: matrix.mpi == 'par'
        uses: actions/cache@v4
        with:
          path: ${{env.METIS_DIR}}
          key: Linux-${{env.METIS_DIR}}-v2.5

      - name: METIS Build
        if: matrix.mpi == 'par' && steps.metis-cache.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-metis@v2.5
        with:
          archive: ${{env.METIS_TGZ}}
          dir: ${{env.METIS_DIR}}

      ### MFEM
      - name: MFEM Checkout
        uses: actions/checkout@v4
        with:
          path: mfem

      - name: MFEM Build
        uses: mfem/github-actions/build-mfem@v2.5
        env:
          MPICXX: c++
          CXXFLAGS: "-g -O1 -std=c++17 ${{matrix.cxxflags}} ${{env.LLVM_CXXFLAGS}} ${{env.MPI_INC}} ${{env.MPI_LIB}} ${{env.LLVM_LDFLAGS}} -Wno-unused-command-line-argument"
          LDFLAGS: "${{matrix.ldflags}}"  # LLVM_LDFLAGS & MPI_LIB, but get_hypre_version needs -lc++ path and ldflags
        with:
          os: ${{runner.os}}
          target: opt
          mpi: ${{matrix.mpi}}
          build-system: cmake  # make
          hypre-dir: ${{env.HYPRE_DIR}}
          metis-dir: ${{env.METIS_DIR}}
          mfem-dir: mfem
          precision: fp64
          library-only: true
          config-options: >
            -GNinja
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DCMAKE_CXX_STANDARD=17
            -DMFEM_PRECISION=double
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
            -DCMAKE_C_COMPILER=${{env.CC}}
            -DCMAKE_CXX_COMPILER=${{env.CXX}}
            -DCMAKE_CXX_FLAGS=${CXXFLAGS}
            -DCMAKE_EXE_LINKER_FLAGS=${LDFLAGS}
            -DMFEM_USE_MEMALLOC=OFF
            -DMFEM_ENABLE_TESTING=ON
            -DMFEM_ENABLE_EXAMPLES=OFF
            -DMFEM_ENABLE_MINIAPPS=OFF
            -DMFEM_ENABLE_BENCHMARKS=OFF
          # config-options: CXX=${{env.CXX}} MPICXX=${{env.MPICXX}} MFEM_USE_MEMALLOC=NO  # make

      - name: MFEM Info
        working-directory: mfem
        run: make info

      - name: MFEM Check
        working-directory: mfem
        run: make check

      - name: MFEM Examples
        working-directory: mfem/examples
        run: make test

      - name: MFEM Miniapps
        working-directory: mfem
        run: make test-miniapps

      - name: MFEM Unittest
        working-directory: mfem
        run: make unittest
