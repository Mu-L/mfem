# Copyright (c) 2010-2025, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

name: "Sanitizers"

permissions:
  actions: write

on:
  # Run on pushes to main development branches
  push:
    branches: ["master", "next"]
  # Run on all pull requests
  pull_request:
  # Allow manual triggering for debugging
  workflow_dispatch:

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

env:
  CLANG_VER: 18
  LLVM_VER: 19.1.7    # https://github.com/llvm/llvm-project/releases
  HYPRE_VER: 2.19.0   # https://github.com/hypre-space/hypre/releases
  METIS_VER: 4.0.3
  # AddressSanitizer (https://clang.llvm.org/docs/AddressSanitizer.html)
  ASAN_OPTIONS: "detect_leaks=1,
                 strict_init_order=1,
                 strict_string_checks=1,
                 check_initialization_order=1,
                 detect_stack_use_after_return=1"
  # UndefinedBehaviorSanitizer (https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)
  UBSAN_OPTIONS: "halt_on_error=1, print_stacktrace=1"
  # MemorySanitizer (https://clang.llvm.org/docs/MemorySanitizer.html)
  MSAN_OPTIONS: "poison_in_dtor=1"

jobs:
  Sanitizers:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [Address, Memory, UndefinedBehavior]
        mpi: [seq, par]
        exclude:
          - sanitizer: Memory  # Avoid running MemorySanitizer with MPI
            mpi: par
        include:
          - sanitizer: Address
            cxxflags: "-fsanitize=address -fsanitize-address-use-after-scope"
            ldflags: "-fsanitize=address"
          - sanitizer: UndefinedBehavior
            cxxflags: "-fsanitize=undefined"
            ldflags: "-fsanitize=undefined"
            llvm_sanitizer: "Undefined"
          - sanitizer: Memory
            cxxflags: "-fsanitize=memory -fsanitize-memory-track-origins -fsanitize-memory-use-after-dtor"
            ldflags: "-fsanitize=memory"
            llvm_sanitizer: "MemoryWithOrigins"

    name: "${{matrix.sanitizer}}-${{matrix.mpi}}"

    steps:
      ### GITHUB_WORKSPACE & GITHUB_ENV
      - name: Workspace Setup
        run: |
          echo "ASAN_DIR=${GITHUB_WORKSPACE}/asan" >> $GITHUB_ENV
          echo "LLVM_DIR=${GITHUB_WORKSPACE}/llvm" >> $GITHUB_ENV

      - name: Env Setup (Clang, LLVM, HYPRE, METIS, CTEST)
        run: |
          echo "CC=clang-${{env.CLANG_VER}}" >> $GITHUB_ENV
          echo "CXX=clang++-${{env.CLANG_VER}}" >> $GITHUB_ENV
          echo "LLVM_INC=${LLVM_DIR}/include/c++/v1" >> $GITHUB_ENV
          echo "LLVM_LIB=${LLVM_DIR}/lib" >> $GITHUB_ENV
          echo "HYPRE_TGZ=v${{env.HYPRE_VER}}.tar.gz" >> $GITHUB_ENV
          echo "HYPRE_DIR=hypre-${{env.HYPRE_VER}}" >> $GITHUB_ENV
          echo "METIS_TGZ=metis-${{env.METIS_VER}}.tar.gz" >> $GITHUB_ENV
          echo "METIS_DIR=metis-${{env.METIS_VER}}" >> $GITHUB_ENV
          echo "CTEST=ctest -j --test-load $(nproc) --stop-on-failure --schedule-random --output-on-failure --test-dir" >> $GITHUB_ENV

      - name: GITHUB_ENV Echo (Clang, LLVM, HYPRE, METIS, CTEST)
        run: |
          echo "[CC] ${{env.CC}}"
          echo "[CXX] ${{env.CXX}}"
          echo "[LLVM_DIR] ${{env.LLVM_DIR}}"
          echo "[LLVM_INC] ${{env.LLVM_INC}}"
          echo "[LLVM_LIB] ${{env.LLVM_LIB}}"
          echo "[HYPRE_TGZ] ${{env.HYPRE_TGZ}}"
          echo "[HYPRE_DIR] ${{env.HYPRE_DIR}}"
          echo "[METIS_TGZ] ${{env.METIS_TGZ}}"
          echo "[METIS_DIR] ${{env.METIS_DIR}}"
          echo "[CTEST] ${{env.CTEST}}"

      ### MPI
      - name: MPI Setup
        if: matrix.mpi == 'par'
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev
          echo "PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe" >> $GITHUB_ENV
          echo "MPI_INC=$(mpicxx --showme:compile)" >> $GITHUB_ENV
          echo "MPI_LIB=$(mpicxx --showme:link)" >> $GITHUB_ENV
          echo "[MPI] Version: $(mpicxx --showme:version)"
          echo "[MPI] Compile: $(mpicxx --showme:compile)"
          echo "[MPI] Link: $(mpicxx --showme:link)"

      ### LSAN_OPTIONS & ASan suppression file
      ### strdup is required for ex1p with Hypre 2.19.0
      - name: ASAN Setup
        run: |
          mkdir -p ${{env.ASAN_DIR}}
          echo LSAN_OPTIONS="suppressions=${{env.ASAN_DIR}}/asan.supp" >> $GITHUB_ENV
          cat << EOF > ${{env.ASAN_DIR}}/asan.supp
          leak:libevent_core-2.1.so
          leak:ompi_mpi_finalize
          leak:ompi_mpi_init
          leak:PMPI_Init
          leak:strdup
          EOF

      ### LLVM libcxx (https://github.com/llvm/llvm-project/tree/main/libcxx)
      - name: LLVM Cache
        if: matrix.sanitizer != 'Address'
        id: llvm-cache
        uses: actions/cache@v4
        with:
          path: ${{env.LLVM_DIR}}
          key: Linux-llvm-${{env.LLVM_VER}}-${{matrix.llvm_sanitizer}}

      - name: LLVM Clone
        if: matrix.sanitizer != 'Address' && steps.llvm-cache.outputs.cache-hit != 'true'
        run: >
          git clone --filter=blob:none --depth=1
          --branch llvmorg-${{env.LLVM_VER}}
          --no-checkout https://github.com/llvm/llvm-project.git llvm-project

      - name: LLVM Checkout
        if: matrix.sanitizer != 'Address' && steps.llvm-cache.outputs.cache-hit != 'true'
        working-directory: llvm-project
        run: |
          git sparse-checkout set --cone
          git checkout llvmorg-${{env.LLVM_VER}}
          git sparse-checkout set cmake llvm/cmake runtimes libcxx libcxxabi

      - name: LLVM Mkdir
        if: matrix.sanitizer != 'Address' && steps.llvm-cache.outputs.cache-hit != 'true'
        run: mkdir ${{env.LLVM_DIR}}

      - name: LLVM Configure
        if: matrix.sanitizer != 'Address' && steps.llvm-cache.outputs.cache-hit != 'true'
        working-directory: ${{env.LLVM_DIR}}
        run: >
          VERBOSE=1
          cmake -GNinja ../llvm-project/runtimes/
          -DCMAKE_C_COMPILER=${{env.CC}}
          -DCMAKE_CXX_COMPILER=${{env.CXX}}
          -DCMAKE_BUILD_TYPE=RelWithDebInfo
          -DCMAKE_INSTALL_PREFIX=/usr
          -DLLVM_USE_SANITIZER=${{matrix.llvm_sanitizer}}
          -DLLVM_BUILD_32_BITS=OFF
          -DLIBCXXABI_USE_LLVM_UNWINDER=OFF
          -DLLVM_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_BENCHMARKS=OFF
          -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi'

      - name: LLVM CMake
        if: matrix.sanitizer != 'Address' && steps.llvm-cache.outputs.cache-hit != 'true'
        working-directory: ${{env.LLVM_DIR}}
        run: cmake --build . -- cxx cxxabi

      - name: GITHUB_ENV Setup (LLVM)
        if: matrix.sanitizer != 'Address'
        run: |
          echo "LLVM_CXXFLAGS=-stdlib=libc++ -I${{env.LLVM_INC}} -Isystem${{env.LLVM_INC}}" >> $GITHUB_ENV
          echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV

      - name: GITHUB_ENV Echo (LLVM)
        if: matrix.sanitizer != 'Address'
        run: |
          echo "[LLVM_CXXFLAGS] ${{env.LLVM_CXXFLAGS}}"
          echo "[LLVM_LDFLAGS] ${{env.LLVM_LDFLAGS}}"

      ### HYPRE
      - name: HYPRE Cache
        id: hypre-cache
        if: matrix.mpi == 'par'
        uses: actions/cache@v4
        with:
          path: ${{env.HYPRE_DIR}}
          key: ${{runner.os}}-ompi-build-${{env.HYPRE_DIR}}-int32-fp64-v2.5

      - name: HYPRE Build
        if: matrix.mpi == 'par' && steps.hypre-cache.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-hypre@v2.5
        with:
          archive: ${{env.HYPRE_TGZ}}
          dir: ${{env.HYPRE_DIR}}
          target: int32
          precision: fp64
          build-system: make

      ### METIS
      - name: METIS Cache
        id: metis-cache
        if: matrix.mpi == 'par'
        uses: actions/cache@v4
        with:
          path: ${{env.METIS_DIR}}
          key: ${{runner.os}}-build-${{env.METIS_DIR}}-v2.5

      - name: METIS Build
        if: matrix.mpi == 'par' && steps.metis-cache.outputs.cache-hit != 'true'
        uses: mfem/github-actions/build-metis@v2.5
        with:
          archive: ${{env.METIS_TGZ}}
          dir: ${{env.METIS_DIR}}

      ### MFEM
      - name: MFEM Checkout
        uses: actions/checkout@v4
        with:
          path: mfem

      - name: MFEM Build
        uses: mfem/github-actions/build-mfem@v2.5
        env:
          CXXFLAGS: ${{matrix.cxxflags}} ${{env.LLVM_CXXFLAGS}} ${{env.MPI_INC}}
          LDFLAGS: ${{matrix.ldflags}} ${{env.LLVM_LDFLAGS}} ${{env.MPI_LIB}}
        with:
          target: opt
          mfem-dir: mfem
          precision: fp64
          os: ${{runner.os}}
          library-only: true
          build-system: cmake
          mpi: ${{matrix.mpi}}
          hypre-dir: ${{env.HYPRE_DIR}}
          metis-dir: ${{env.METIS_DIR}}
          config-options: >-
            -GNinja
            -DMPICXX=${{env.CXX}}
            -DCMAKE_CXX_STANDARD=17
            -DMFEM_USE_MEMALLOC=OFF
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DCMAKE_CXX_COMPILER=${{env.CXX}}
            -DCMAKE_CXX_FLAGS_RELEASE='-g -O2 -fno-omit-frame-pointer'

      - name: MFEM Check
        working-directory: mfem/build
        run: ninja -v check

      - name: MFEM Tests
        working-directory: mfem/build
        run: ninja -v tests/unit/all && ${{env.CTEST}} tests/unit

      - name: MFEM Examples
        working-directory: mfem/build
        run: ninja -v examples && ${{env.CTEST}} examples

      - name: MFEM Miniapps
        working-directory: mfem/build
        run: ninja -v miniapps && ${{env.CTEST}} miniapps
