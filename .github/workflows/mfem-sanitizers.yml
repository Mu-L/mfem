# Copyright (c) 2010-2025, Lawrence Livermore National Security, LLC. Produced
# at the Lawrence Livermore National Laboratory. All Rights reserved. See files
# LICENSE and NOTICE for details. LLNL-CODE-806117.
#
# This file is part of the MFEM library. For more information and source code
# availability visit https://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the BSD-3 license. We welcome feedback and contributions, see file
# CONTRIBUTING.md for details.

name: "Sanitizers"

permissions:
  actions: write

on:
  push:
    branches:
      - master
      - next
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true

env:
  LLVM_VER: 18.1.3
  LLVM_LIB: ${GITHUB_WORKSPACE}/llvm-build/lib
  LLVM_INC: ${GITHUB_WORKSPACE}/llvm-build/include/c++/v1
  MSAN_OPTIONS: "poison_in_dtor=1"
  UBSAN_OPTIONS: "halt_on_error=1,
                  print_stacktrace=1"
  ASAN_OPTIONS: "detect_leaks=1,
                 strict_init_order=1,
                 strict_string_checks=1,
                 check_initialization_order=1,
                 detect_stack_use_after_return=1"

jobs:
  Sanitizers:
    runs-on: ubuntu-latest
    strategy:
      # Avoid canceling all in-progress and queued jobs in the matrix if any one fails
      fail-fast: false
      matrix:
        sanitizer: [AddressSanitizer, UndefinedBehaviorSanitizer, MemorySanitizer]
        include:
          # AddressSanitizer
          # https://clang.llvm.org/docs/AddressSanitizer.html
          - sanitizer: AddressSanitizer
            cxxflags: "-fsanitize=address -fno-omit-frame-pointer
                       -fsanitize-address-use-after-scope"
            ldflags: "-fsanitize=address"
            llvm_sanitizer: "Address"

          # UndefinedBehaviorSanitizer
          # https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
          - sanitizer: UndefinedBehaviorSanitizer
            cxxflags: "-fsanitize=undefined -fno-omit-frame-pointer"
            ldflags: "-fsanitize=undefined"
            llvm_sanitizer: "Undefined"

          # MemorySanitizer
          # https://clang.llvm.org/docs/MemorySanitizer.html
          - sanitizer: MemorySanitizer
            cxxflags: "-fsanitize=memory -fno-omit-frame-pointer
                       -fsanitize-memory-track-origins -fsanitize-memory-use-after-dtor"
            ldflags: "-fsanitize=memory"
            llvm_sanitizer: "MemoryWithOrigins"

    name: "${{matrix.sanitizer}}"

    steps:
      - name: Setup Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Setup Clang Environment
        run: |
          echo "CC=cc" >> $GITHUB_ENV
          echo "CXX=c++" >> $GITHUB_ENV

      - name: Setup LLVM Environment
        if: matrix.sanitizer != 'AddressSanitizer'
        run: |
          echo "LLVM_CXXFLAGS=-stdlib=libc++ -I${{env.LLVM_INC}} -Isystem${{env.LLVM_INC}}" >> $GITHUB_ENV
          echo "LLVM_LDFLAGS=-L${{env.LLVM_LIB}} -lc++abi -Wl,-rpath,${{env.LLVM_LIB}}" >> $GITHUB_ENV

      - name: Dump Environment
        run: |
          echo "> ${{env.CC}} -v"
          ${{env.CC}} -v
          echo "> ${{env.CXX}} -v"
          ${{env.CXX}} -v
          echo "> LLVM_CXXFLAGS: ${{env.LLVM_CXXFLAGS}}"
          echo "> LLVM_LDFLAGS: ${{env.LLVM_LDFLAGS}}"

      ### LLVM libcxx Build Steps
      - name: LLVM Clone
        if: matrix.sanitizer != 'AddressSanitizer'
        run: >
          git clone --filter=blob:none --depth=1
          --branch llvmorg-${{env.LLVM_VER}}
          --no-checkout https://github.com/llvm/llvm-project.git llvm-project

      - name: LLVM Checkout
        if: matrix.sanitizer != 'AddressSanitizer'
        working-directory: llvm-project
        run: |
          git sparse-checkout set --cone
          git checkout llvmorg-${{env.LLVM_VER}}
          git sparse-checkout set cmake llvm/cmake runtimes libcxx libcxxabi

      - name: LLVM CMake Mkdir
        if: matrix.sanitizer != 'AddressSanitizer'
        run: mkdir llvm-build

      - name: LLVM CMake Configure
        if: matrix.sanitizer != 'AddressSanitizer'
        working-directory: llvm-build
        run: >
          VERBOSE=1
          cmake -GNinja ../llvm-project/runtimes/
          -DCMAKE_C_COMPILER=${{env.CC}}
          -DCMAKE_CXX_COMPILER=${{env.CXX}}
          -DCMAKE_BUILD_TYPE=RelWithDebInfo
          -DCMAKE_INSTALL_PREFIX=/usr
          -DLLVM_USE_SANITIZER=${{matrix.llvm_sanitizer}}
          -DLLVM_BUILD_32_BITS=OFF
          -DLIBCXXABI_USE_LLVM_UNWINDER=OFF
          -DLLVM_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_TESTS=OFF
          -DLIBCXX_INCLUDE_BENCHMARKS=OFF
          -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi'

      - name: LLVM CMake Ninja
        if: matrix.sanitizer != 'AddressSanitizer'
        working-directory: llvm-build
        run: cmake --build . -- cxx cxxabi

      ### MFEM Build and Test Steps
      - name: MFEM Checkout
        uses: actions/checkout@v4
        with:
          path: mfem

      - name: MFEM Build
        uses: mfem/github-actions/build-mfem@v2.5
        env:
          CXXFLAGS: "-g -O1 -std=c++17 ${{matrix.cxxflags}} ${{env.LLVM_CXXFLAGS}}"
          LDFLAGS: "${{matrix.ldflags}} ${{env.LLVM_LDFLAGS}}"
        with:
          os: ${{runner.os}}
          target: opt
          mpi: seq
          hypre-dir: unused-hypre-dir
          metis-dir: unused-metis-dir
          mfem-dir: mfem
          build-system: make
          library-only: true  # false
          config-options: CXX=${{env.CXX}}

      - name: MFEM Info
        working-directory: mfem
        run: make info

      - name: MFEM Sanitize
        working-directory: mfem
        run: make check  # test
