# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
# the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
# reserved. See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.


# General GitLab pipelines configurations for supercomputers and Linux clusters
# at Lawrence Livermore National Laboratory (LLNL).

# We define the following GitLab pipeline variables:
#
# BUILD_ROOT:
# The path to the shared resources between all jobs. For example, external
# repositories like 'tests' and 'tpls' are cloned here. Also, 'tpls' is built
# once for all targets, so that build happen here. The BUILD_ROOT is unique to
# the pipeline, preventing any form of concurrency with other pipelines. This
# also means that the BUILD_ROOT directory will never be cleaned.
# TODO: add a clean-up mechanism
#
# BUILD_PATH:
# In BUILD_ROOT, we want to separate builds depending on the machine used,
# typically because we build on a set of dependencies per machine.
#
# REBASELINE:
# Defines the default choice for updating the saved baseline results. By default
# the baseline can only be updated from the master branch. This variable offers
# the option to manually ask for rebaselining from another branch if necessary.
#
# MFEM_ALLOC_NAME:
# On LLNL's quartz, there is only one allocation shared among jobs in order to
# save time and resources. This allocation has to be uniquely named so that we
# are sure to retrieve it.

variables:
  BUILD_ROOT: ${CI_BUILDS_DIR}/mfem_${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}
  BUILD_PATH: ${CI_BUILDS_DIR}/mfem_${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}/${PLAT}/${TOOLCHAIN}
  REBASELINE: "NO"
  MFEM_ALLOC_NAME: mfem_ci_${CI_PIPELINE_ID}
  TPLS_ORIGIN: ssh://git@mybitbucket.llnl.gov:7999/mfem/tpls.git
  TESTS_ORIGIN: ssh://git@mybitbucket.llnl.gov:7999/mfem/tests.git
  ARTIFACTS_DIR: ${CI_PROJECT_DIR}/artifacts

# The pipeline is divided into stages. Usually, these are also synchronisation
# points, however, we use "needs" keyword to express the DAG of jobs for more
# efficiency.
# - We use setup phase to download content outside of mfem directory.
# - Allocate is where quartz resources are allocated once for all.
# - Libs is where dependencies are built.
# - Build is where we build MFEM for multiple toolchains.
# - Test is where we perform a first set of tests on MFEM build.
# - Baseline_checks gathers baseline-type test suites execution
# - Baseline_publish, only available on master, allows to commit baseline
#   results
# - Deallocate releases quartz resources
stages:
  - setup
  - allocate
  - libs
  - build
  - test
  - baseline_check
  - deallocate
  - baseline_publish

    # This section is LLNL-specific
.setup:
  stage: setup
  variables:
    GIT_STRATEGY: none
  script:
    - mkdir -p ${BUILD_ROOT} && cd ${BUILD_ROOT}
    - if [ ! -d "tpls" ]; then git clone ${TPLS_ORIGIN}; fi
    - if [ ! -d "tests" ]; then git clone ${TESTS_ORIGIN}; fi
    - cd tpls && git pull && cd ..
    - cd tests && git pull && cd ..

.with_gcc_6_1_0:
  variables:
    TOOLCHAIN: gcc_6_1_0
  before_script:
    - module load gcc/6.1.0

.with_gcc_4_9_3:
  variables:
    TOOLCHAIN: gcc_4_9_3
  before_script:
    - module load gcc/4.9.3

# Build of dependencies and mfem:
# if on quartz, uses a subpart of preallocated resources
.build_hypre:
  variables:
    EXEC_PREFIX: ""
    GIT_STRATEGY: none
  stage: libs
  script:
    - cd ${BUILD_ROOT}/tpls
    - mkdir -p ${BUILD_PATH}
    - make clean
    - |
      if [[ "${MPIEXEC}" == "srun" ]]
      then
      export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
      export EXEC_PREFIX="srun --jobid=${JOB_ID} --extra-node-info=1:${MAKE_PAR}:1 --cpus-per-task=${MAKE_PAR} --ntasks=1"
      fi
    - $EXEC_PREFIX make -j ${MAKE_PAR} hypre PREFIX=${BUILD_PATH}/hypre/src/ BUILD_DIR=${BUILD_PATH} LOG_DIR=${BUILD_PATH}

.build_metis:
  variables:
    EXEC_PREFIX: ""
    GIT_STRATEGY: none
  stage: libs
  script:
    - cd ${BUILD_ROOT}/tpls
    - mkdir -p ${BUILD_PATH}
    - |
      if [[ "${MPIEXEC}" == "srun" ]]
      then
      export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
      export EXEC_PREFIX="srun --jobid=${JOB_ID} --extra-node-info=1:${MAKE_PAR}:1 --cpus-per-task=${MAKE_PAR} --ntasks=1"
      fi
    - $EXEC_PREFIX make -j ${MAKE_PAR} ${METIS} PREFIX=${BUILD_PATH}/ BUILD_DIR=${BUILD_PATH} LOG_DIR=${BUILD_PATH} CC=cc CXX=c++

.build_mfem:
  variables:
    EXEC_PREFIX: ""
  stage: build
  script:
    - mkdir -p ${BUILD_PATH}
    - cd ..
    - cp -r mfem ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
    - cd ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
    - |
      if [[ "${MPIEXEC}" == "srun" ]]
      then
      export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
      export EXEC_PREFIX="srun --jobid=${JOB_ID} --extra-node-info=1:${MAKE_PAR}:1 --cpus-per-task=${MAKE_PAR} --ntasks=1"
      fi
    - make config CXX=c++ MPICXX=mpicxx MFEM_USE_MPI=${MFEM_USE_MPI} MFEM_DEBUG=${MFEM_DEBUG} MFEM_MPIEXEC="$EXEC_PREFIX" MFEM_MPIEXEC_NP=$MPIEXEC_NP
    - $EXEC_PREFIX make -j ${MAKE_PAR} all

# Could this phase use a parallel run?
.sanitycheck_mfem:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
    - make test

# Shared script for baseline and sample-run-baseline.
# BASELINE_TEST is what differentiate between both.
.baseline_script: &baseline_script |
  # locals
  _full_out=${BASELINE_TEST}.out
  _err=${BASELINE_TEST}.err
  _out=${BASELINE_TEST}-${SYS_TYPE}.out
  _ref=../${BASELINE_TEST}-${SYS_TYPE}.saved
  _out_txt=${BASELINE_TEST}.txt
  _diff=${BASELINE_TEST}-diff.txt
  # prepare
  cd ${BUILD_ROOT}
  ln -snf ${CI_PROJECT_DIR} mfem
  cd tests
  mkdir _${BASELINE_TEST} && cd _${BASELINE_TEST}
  # run
  if [[ "${MPIEXEC}" == "srun" ]]
  then
      export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
      export EXEC_PREFIX="srun --jobid=${JOB_ID} --extra-node-info=1:${BASELINE_PAR}:1 --cpus-per-task=${BASELINE_PAR} --ntasks=1"
  fi
  ${EXEC_PREFIX} ../runtest ../../mfem "${BASELINE_TEST} ${ADDITIONAL_DIR}"
  # post
  mkdir ${ARTIFACTS_DIR}
  if [[ ! -f ${_full_out} || ! -f ${_out} || -s ${_full_err} ]]
  then
      echo "Something went WRONG in ${BASELINE_TEST}";
      cp ${_full_err} ${ARTIFACTS_DIR}/
      exit 1;
  fi
  cp ${_out} ${_out_txt}
  diff -u ${_ref} ${_out} | tee ${_diff} || true
  cp ${_full_out} ${_out_txt} ${_diff} ${ARTIFACTS_DIR}/
  if [[ ! $(head -n1 ${_diff}) ]]; then true; else false; fi

.baselinecheck_mfem:
  stage: baseline_check
  variables:
    BASELINE_TEST: baseline
    ADDITIONAL_DIR: ${BUILD_ROOT}/tpls
  script:
    - *baseline_script
  artifacts:
    when: always
    paths:
      - artifacts
  allow_failure: true

.samplebaselinecheck_mfem:
  stage: baseline_check
  variables:
    BASELINE_TEST: sample-runs-baseline
    ADDITIONAL_DIR: ""
  script:
    - *baseline_script
  timeout: 4h
  artifacts:
    when: always
    paths:
      - artifacts
  allow_failure: true

# This job can only be manually triggers on a pipeline for master branch,
# or if the pipeline was triggered with REBASELINE="YES"
.rebaseline_mfem:
  stage: baseline_publish
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $REBASELINE == "YES"'
      when: manual
  script:
    - echo "cd ${BUILD_ROOT}/tests"
    - echo "cp ${CI_PROJECT_DIR}/artifacts/baseline-${SYS_TYPE}.txt ./baseline-${SYS_TYPE}.saved"
    - echo "git add baseline-${SYS_TYPE}.saved"
    - echo "git commit -m Rebaselined in Gitlab pipeline #${CI_PIPELINE_ID}"
    - echo "git push origin master"

# The list on jobs is in fact defined in other files.
include:
  - local: .gitlab/quartz.yml
