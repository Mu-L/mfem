# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
# the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
# reserved. See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.

# BUILD_ROOT: The path to the shared resources between all jobs.
#   For example, external repository like tests and tpls are clone here
#   Also, tpls are build once for all targets, so builds happen here
# The naming of BUILD_ROOT is unique to the pipeline, preventing any form
# of concurrency with other pipelines. However, this means this directory
# will never be cleaned.
# TODO: add a clean-up mechanism
#
# BUILD_PATH: In BUILD_ROOT, we want to separate builds depending on the
# machine used, typically because we build on set of dependencies per
# machine.
#
# REBASELINE: Defines the default choice for deploying/publishing baseline
# results. By default baseline is only publishable from master branch. This
# offers the possibility to manually ask for it on another branch if necessary.
#
# MFEM_ALLOC_NAME: On quartz, there is only one allocation shared among jobs
# in order to save time and resources. This allocation has to be uniquely named
# so that we are sure to retrieve it.
variables:
    BUILD_ROOT: ${CI_BUILDS_DIR}/mfem_${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}
    BUILD_PATH: ${CI_BUILDS_DIR}/mfem_${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}/${PLAT}/${TOOLCHAIN}
    REBASELINE: "NO"
    MFEM_ALLOC_NAME: mfem_ci_${CI_PIPELINE_ID}

stages:
    - precleanup
    - setup
    - allocate
    - libs
    - build
    - test
    - deallocate
    - baseline_check
    - baseline_publish
    - postcleanup

.precleanup:
    stage: precleanup
    variables:
        GIT_STRATEGY: none
    script:
        - rm -rf ${BUILD_ROOT}/${PLAT}
        - rm -f ${BUILD_ROOT}/mfem

.setup:
    stage: setup
    variables:
        GIT_STRATEGY: none
    script:
        - mkdir -p ${BUILD_ROOT} && cd ${BUILD_ROOT}
        - if [ ! -d "tpls" ]; then git clone ssh://git@mybitbucket.llnl.gov:7999/mfem/tpls.git; fi
        - if [ ! -d "tests" ]; then git clone ssh://git@mybitbucket.llnl.gov:7999/mfem/tests.git; fi
        - cd tpls && git pull && cd ..
        - cd tests && git pull && cd ..

.with_gcc_6_1_0:
    variables:
        TOOLCHAIN: gcc_6_1_0
    before_script:
        - module load gcc/6.1.0

.with_gcc_4_9_3:
    variables:
        TOOLCHAIN: gcc_4_9_3
    before_script:
        - module load gcc/4.9.3

.build_hypre:
    variables:
        EXEC_PREFIX: ""
    stage: libs
    variables:
        GIT_STRATEGY: none
    script:
        - cd ${BUILD_ROOT}/tpls
        - mkdir -p ${BUILD_PATH}
        - make clean
        - |
          if [[ "${MPIEXEC}" == "srun" ]]
          then
              export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
              export EXEC_PREFIX="srun --jobid=${JOB_ID}"
          fi
        - $EXEC_PREFIX make -j 4 hypre PREFIX=${BUILD_PATH}/hypre/src/ BUILD_DIR=${BUILD_PATH} LOG_DIR=${BUILD_PATH}

.build_metis:
    variables:
        EXEC_PREFIX: ""
    stage: libs
    variables:
        GIT_STRATEGY: none
    script:
        - cd ${BUILD_ROOT}/tpls
        - mkdir -p ${BUILD_PATH}
        - |
          if [[ "${MPIEXEC}" == "srun" ]]
          then
              export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
              export EXEC_PREFIX="srun --jobid=${JOB_ID}"
          fi
        - $EXEC_PREFIX make -j 4 ${METIS} PREFIX=${BUILD_PATH}/ BUILD_DIR=${BUILD_PATH} LOG_DIR=${BUILD_PATH} CC=cc CXX=c++

.build_mfem:
    variables:
        EXEC_PREFIX: ""
    stage: build
    script:
        - mkdir -p ${BUILD_PATH}
        - cd ..
        - cp -r mfem ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
        - cd ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
        - |
          if [[ "${MPIEXEC}" == "srun" ]]
          then
              export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
              export EXEC_PREFIX="srun --jobid=${JOB_ID}"
          fi
        - make config CXX=c++ MPICXX=mpicxx MFEM_USE_MPI=${MFEM_USE_MPI} MFEM_DEBUG=${MFEM_DEBUG} MFEM_MPIEXEC="$EXEC_PREFIX" MFEM_MPIEXEC_NP=$MPIEXEC_NP
        - $EXEC_PREFIX make -j 8 all

.sanitycheck_mfem:
    stage: test
    variables:
        GIT_STRATEGY: none
    script:
        - cd ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
        - make test

# The BUILD_ROOT is unique to the branch and pipeline ID. branch is not necessary but makes it easier to retrieve a data.
# This means that there cannot be concurrency between 2 pipelines.
.baselinecheck_mfem:
    stage: baseline_check
    script:
        - cd ${BUILD_ROOT}
        - ln -snf ${CI_PROJECT_DIR} mfem
        - cd tests
        - mkdir -p runs && cd runs && rm -f *
        - ../runtest ../../mfem "baseline ${BUILD_ROOT}/tpls"
        - cp baseline.out ${CI_PROJECT_DIR}/baseline-${SYS_TYPE}-saved.txt
        - diff -u baseline-${SYS_TYPE}.out ../baseline-${SYS_TYPE}.saved | tee baseline-diff.txt || true
        - cp baseline-diff.txt ${CI_PROJECT_DIR}
        - if [[ ! $(head -n1 baseline-diff.txt) ]]; then true; else false; fi
    allow_failure: true
    artifacts:
        paths:
            - baseline-${SYS_TYPE}-saved.txt
            - baseline-diff.txt
        when: always

.rebaseline_mfem:
    stage: baseline_publish
    #    only:
    #        refs:
    #            - master
    #        variables:
    #            - $REBASELINE == "YES"
    script:
        - echo "cd ${BUILD_PATH}/tests"
        - echo "cp ${CI_PROJECT_DIR}/baseline-${SYS_TYPE}-saved.txt ./baseline-${SYS_TYPE}.saved"
        - echo "git add baseline-${SYS_TYPE}.saved"
        - echo "git commit -m Rebaselined"
        - echo "git push origin master"
    when: manual
    allow_failure: false

.postcleanup:
    stage: postcleanup
    variables:
        GIT_STRATEGY: none
    script:
        - rm -rf ${BUILD_ROOT}/${PLAT}
        - rm -f ${BUILD_ROOT}/mfem

include:
    - local: .gitlab/quartz.yml
