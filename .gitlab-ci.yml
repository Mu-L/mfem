variables:
    BUILD_ROOT: ${CI_BUILDS_DIR}/mfem_${CI_COMMIT_REF_SLUG}
    BUILD_PATH: ${CI_BUILDS_DIR}/mfem_${CI_COMMIT_REF_SLUG}/${PLAT}/${TOOLCHAIN}
    REBASELINE: "NO"
    ASTYLE: ${CI_BUILDS_DIR}/mfem_${CI_COMMIT_REF_SLUG}/tpls/install/astyle/astyle
    MFEM_ALLOC_NAME: mfem_ci_${CI_COMMIT_SHORT_SHA}

stages:
    - precleanup
    - setup
    - allocate
    - libs
    - build
    - test
    - release
    - baseline_check
    - baseline_publish
    - postcleanup

.precleanup:
    stage: precleanup
    variables:
        GIT_STRATEGY: none
    script:
        rm -rf ${BUILD_ROOT}/${PLAT}

.setup:
    stage: setup
    variables:
        GIT_STRATEGY: none
    script:
        - mkdir -p ${BUILD_ROOT} && cd ${BUILD_ROOT}
        - if [ ! -d "tpls" ]; then git clone ssh://git@mybitbucket.llnl.gov:7999/mfem/tpls.git; fi
        - if [ ! -d "tests" ]; then git clone ssh://git@mybitbucket.llnl.gov:7999/mfem/tests.git; fi
        - cd tpls && git pull && cd ..
        - cd tests && git pull && cd ..

build_astyle:
    stage: libs
    tags:
        - shell
        - quartz
    variables:
        GIT_STRATEGY: none
    script:
        - cd ${BUILD_ROOT}/tpls
        - make astyle PREFIX=${BUILD_ROOT}/tpls/install/ BUILD_DIR=${BUILD_ROOT}/tpls/install/ LOG_DIR=${BUILD_ROOT}/tpls/install/

.with_gcc_6_1_0:
    variables:
        TOOLCHAIN: gcc_6_1_0
    before_script:
        - module load gcc/6.1.0

.with_gcc_4_9_3:
    variables:
        TOOLCHAIN: gcc_4_9_3
    before_script:
        - module load gcc/4.9.3

.build_hypre:
    variables:
        EXEC_PREFIX: ""
    stage: libs
    variables:
        GIT_STRATEGY: none
    script:
        - cd ${BUILD_ROOT}/tpls
        - mkdir -p ${BUILD_PATH}
        - make clean
        - |
          if [[ "${MPIEXEC}" == "srun" ]]
          then
              export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
              export EXEC_PREFIX="srun --jobid=${JOB_ID}"
          fi
        - $EXEC_PREFIX make -j 4 hypre PREFIX=${BUILD_PATH}/hypre/src/ BUILD_DIR=${BUILD_PATH} LOG_DIR=${BUILD_PATH}

.build_metis:
    variables:
        EXEC_PREFIX: ""
    stage: libs
    variables:
        GIT_STRATEGY: none
    script:
        - cd ${BUILD_ROOT}/tpls
        - mkdir -p ${BUILD_PATH}
        - |
          if [[ "${MPIEXEC}" == "srun" ]]
          then
              export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
              export EXEC_PREFIX="srun --jobid=${JOB_ID}"
          fi
        - $EXEC_PREFIX make -j 4 ${METIS} PREFIX=${BUILD_PATH}/ BUILD_DIR=${BUILD_PATH} LOG_DIR=${BUILD_PATH} CC=cc CXX=c++

.build_mfem:
    variables:
        EXEC_PREFIX: ""
    stage: build
    script:
        - mkdir -p ${BUILD_PATH}
        - cd ..
        - cp -r mfem ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
        - cd ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
        - |
          if [[ "${MPIEXEC}" == "srun" ]]
          then
              export JOB_ID=$(squeue -h --name=${MFEM_ALLOC_NAME} --format=%A)
              export EXEC_PREFIX="srun --jobid=${JOB_ID}"
          fi
        - make config CXX=c++ MPICXX=mpicxx MFEM_USE_MPI=${MFEM_USE_MPI} MFEM_DEBUG=${MFEM_DEBUG} MFEM_MPIEXEC="$EXEC_PREFIX" MFEM_MPIEXEC_NP=$MPIEXEC_NP
        - $EXEC_PREFIX make -j 4 all

.sanitycheck_mfem:
    stage: test
    variables:
        GIT_STRATEGY: none
    script:
        - cd ${BUILD_PATH}/mfem_${MFEM_USE_MPI}_${MFEM_DEBUG}
        - make test

.stylecheck_mfem:
    stage: test
    variables:
        GIT_STRATEGY: none
    script:
        - make style-check ASTYLE_BIN=$ASTYLE

.baselinecheck_mfem:
    stage: baseline_check
    script:
        - cd ${BUILD_ROOT}
        - ln -s ${CI_PROJECT_DIR} mfem
        - cd tests
        - mkdir -p runs_${CI_COMMIT_REF_SLUG}
        - cd runs_${CI_COMMIT_REF_SLUG}
        - rm -f *
        - ../runtest ../../mfem baseline
        - cp baseline.out ${CI_PROJECT_DIR}/baseline-${SYS_TYPE}-saved.txt
    artifacts:
        paths:
            - baseline-${SYS_TYPE}-saved.txt

.rebaseline_mfem:
    stage: baseline_publish
    #    only:
    #        refs:
    #            - master
    #        variables:
    #            - $REBASELINE == "YES"
    script:
        - echo "cd ${BUILD_PATH}/tests"
        - echo "cp ${CI_PROJECT_DIR}/baseline-${SYS_TYPE}-saved.txt ./baseline-${SYS_TYPE}.saved"
        - echo "git add baseline-${SYS_TYPE}.saved"
        - echo "git commit -m Rebaselined"
        - echo "git push origin master"
    when: manual
    allow_failure: false

.postcleanup:
    stage: postcleanup
    variables:
        GIT_STRATEGY: none
    script:
        rm -rf ${BUILD_ROOT}/${PLAT}

include:
    - local: .gitlab-ci-quartz.yml
    #- local: .gitlab-ci-lassen.yml
