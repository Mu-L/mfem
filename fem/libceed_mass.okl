// Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
// reserved. See file COPYRIGHT for details.
//
// This file is part of the MFEM library. For more information and source code
// availability see http://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (as published by the Free
// Software Foundation) version 2.1 dated February 1999.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

// *****************************************************************************
// OCCA parser doesn't like struct here
//struct BuildContext { CeedInt dim, space_dim; };

// *****************************************************************************
@kernel void f_build_mass_const(int *ctx, CeedInt Q,
                                const int *iOf7, const int *oOf7,
                                const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *J = in + iOf7[0],
//    *qw = in + iOf7[1];
//  CeedScalar
//    *rho = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const int dim = ctx[0];
    const int space_dim = ctx[1];
    const CeedInt dims = dim + 10*space_dim;
    if (dims == 11) {
      out[oOf7[0]+i] = in[iOf7[0]+i] * in[iOf7[1]+i];
    } else if (dims == 22) {
      // 0 2
      // 1 3
      out[oOf7[0]+i] = (in[iOf7[0]+i+Q*0]*in[iOf7[0]+i+Q*3] -
                        in[iOf7[0]+i+Q*1]*in[iOf7[0]+i+Q*2]) * in[iOf7[1]+i];
    } else if (dims == 33) {
      // 0 3 6
      // 1 4 7
      // 2 5 8
      out[oOf7[0]+i] = (in[iOf7[0]+i+Q*0]*
                          (in[iOf7[0]+i+Q*4]*in[iOf7[0]+i+Q*8] -
                           in[iOf7[0]+i+Q*5]*in[iOf7[0]+i+Q*7]) -
                        in[iOf7[0]+i+Q*1]*
                          (in[iOf7[0]+i+Q*3]*in[iOf7[0]+i+Q*8] -
                           in[iOf7[0]+i+Q*5]*in[iOf7[0]+i+Q*6]) +
                        in[iOf7[0]+i+Q*2]*
                          (in[iOf7[0]+i+Q*3]*in[iOf7[0]+i+Q*7] -
                           in[iOf7[0]+i+Q*4]*in[iOf7[0]+i+Q*6])) *
                        in[iOf7[1]+i];
    }
  }
}

// *****************************************************************************
@kernel void f_build_mass_grid(int *ctx, CeedInt Q,
                               const int *iOf7, const int *oOf7,
                               const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *J = in + iOf7[0],
//    *qw = in + iOf7[1];
//  CeedScalar
//    *rho = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    const int dim = ctx[0];
    const int space_dim = ctx[1];
    const CeedInt dims = dim + 10*space_dim;
    if (dims == 11) {
      out[oOf7[0]+i] = in[iOf7[0]+i] * in[iOf7[1]+i];
    } else if (dims == 22) {
      // 0 2
      // 1 3
      out[oOf7[0]+i] = (in[iOf7[0]+i+Q*0]*in[iOf7[0]+i+Q*3] -
                        in[iOf7[0]+i+Q*1]*in[iOf7[0]+i+Q*2]) * in[iOf7[1]+i];
    } else if (dims == 33) {
      // 0 3 6
      // 1 4 7
      // 2 5 8
      out[oOf7[0]+i] = (in[iOf7[0]+i+Q*0]*
                          (in[iOf7[0]+i+Q*4]*in[iOf7[0]+i+Q*8] -
                           in[iOf7[0]+i+Q*5]*in[iOf7[0]+i+Q*7]) -
                        in[iOf7[0]+i+Q*1]*
                          (in[iOf7[0]+i+Q*3]*in[iOf7[0]+i+Q*8] -
                           in[iOf7[0]+i+Q*5]*in[iOf7[0]+i+Q*6]) +
                        in[iOf7[0]+i+Q*2]*
                          (in[iOf7[0]+i+Q*3]*in[iOf7[0]+i+Q*7] -
                           in[iOf7[0]+i+Q*4]*in[iOf7[0]+i+Q*6])) *
                        in[iOf7[1]+i];
    }
  }
}


// *****************************************************************************
@kernel void f_apply_mass(void *ctx, CeedInt Q,
                          const int *iOf7, const int *oOf7,
                          const CeedScalar *in, CeedScalar *out) {
//  const CeedScalar
//    *u = in + iOf7[0],
//    *rho = in + iOf7[1];
//  CeedScalar *v = out + oOf7[0];
  for (int i=0; i<Q; i++; @tile(TILE_SIZE,@outer,@inner)) {
    out[oOf7[0]+i] = in[iOf7[0]+i] * in[iOf7[1]+i];
  }
}
